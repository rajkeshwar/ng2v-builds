{"version":3,"file":"color-spectrum.js","sourceRoot":"","sources":["../../../src/lib/colorpicker/color-spectrum.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { ColorLocale } from './color-locale';\r\nimport { ColorUtil, Hsva } from './color-util';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md2-color-spectrum',\r\n  templateUrl: 'color-spectrum.html',\r\n  styleUrls: ['color-spectrum.css'],\r\n  exportAs: 'md2ColorSpectrum'\r\n})\r\nexport class Md2ColorSpectrum {\r\n\r\n  private _color: string;\r\n  private hsva: Hsva;\r\n  _hue: string;\r\n  _alpha: string;\r\n\r\n  constructor(private _locale: ColorLocale, private _util: ColorUtil) { }\r\n\r\n  @Output() colorChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  @Input()\r\n  get color() { return this._color; }\r\n  set color(value: string) {\r\n    if (this._color !== value) {\r\n      this._color = value || this._locale.defaultColor;\r\n      this.hsva = this._util.stringToHsva(this.color);\r\n      this.update(false);\r\n    }\r\n  }\r\n\r\n  get saturation(): any {\r\n    return {\r\n      'left': `${this.hsva.s * 100}%`,\r\n      'top': `${100 - this.hsva.v * 100}%`\r\n    };\r\n  }\r\n\r\n  get hue(): { [key: string]: string } {\r\n    return {\r\n      'left': `${this.hsva.h * 100}%`\r\n    };\r\n  }\r\n\r\n  get alpha(): { [key: string]: string } {\r\n    return {\r\n      'background': `linear-gradient(to right, transparent, ${this._alpha})`\r\n    };\r\n  }\r\n\r\n  get alphaPointer(): { [key: string]: string } {\r\n    return {\r\n      'left': `${this.hsva.a * 100}%`\r\n    };\r\n  }\r\n\r\n  _setSaturation(event: any) {\r\n    this.hsva.s = event.x / event.width;\r\n    this.hsva.v = 1 - event.y / event.height;\r\n    this.update(true);\r\n  }\r\n\r\n  _setHue(event: any) {\r\n    this.hsva.h = event.x / event.width;\r\n    this.update(true);\r\n  }\r\n\r\n  _setAlpha(event: any) {\r\n    this.hsva.a = event.x / event.width;\r\n    this.update(true);\r\n  }\r\n\r\n  private update(isInitialized: boolean) {\r\n    let rgba = this._util.denormalizeRGBA(this._util.hsvaToRgba(this.hsva));\r\n    let hueRgba = this._util.denormalizeRGBA(this._util.hsvaToRgba(new Hsva(this.hsva.h, 1, 1, 1)));\r\n\r\n    this._alpha = 'rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')';\r\n    this._hue = 'rgb(' + hueRgba.r + ',' + hueRgba.g + ',' + hueRgba.b + ')';\r\n    this._color = this._util.outputFormat(this.hsva, this._locale.formatColor);\r\n    if (isInitialized) {\r\n      this._emitChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Emits an event when the user selects a color. */\r\n  _emitChangeEvent(): void {\r\n    this.colorChange.emit(this.color);\r\n  }\r\n\r\n}\r\n"]}