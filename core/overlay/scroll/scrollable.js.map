{"version":3,"file":"scrollable.js","sourceRoot":"","sources":["../../../../../src/lib/core/overlay/scroll/scrollable.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAqB,MAAM,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEzF,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AACrC,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,+BAA+B,CAAC;AAGvC;;;;GAIG;AAIH,IAAa,UAAU;IAIrB,oBAAoB,WAAuB,EACvB,OAAyB,EACzB,OAAe,EACf,SAAmB;QAHnB,gBAAW,GAAX,WAAW,CAAY;QACvB,YAAO,GAAP,OAAO,CAAkB;QACzB,YAAO,GAAP,OAAO,CAAQ;QACf,cAAS,GAAT,SAAS,CAAU;QAN/B,qBAAgB,GAAmB,IAAI,OAAO,EAAE,CAAC;IAMf,CAAC;IAE3C,6BAAQ,GAAR;QAAA,iBAQC;QAPC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;YACpD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC,aAAa,EAAE,QAAQ,EAAE,UAAC,KAAY;gBACtF,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,gCAAW,GAAX;QACE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC9B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,oCAAe,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;IAC9C,CAAC;IAED,kCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACH,iBAAC;AAAD,CAAC,AAtCD,IAsCC;AAtCY,UAAU;IAHtB,SAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;KAC7B,CAAC;qCAKiC,UAAU;QACd,gBAAgB;QAChB,MAAM;QACJ,QAAQ;GAP5B,UAAU,CAsCtB;SAtCY,UAAU","sourcesContent":["import {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {ScrollDispatcher} from './scroll-dispatcher';\r\nimport 'rxjs/add/observable/fromEvent';\r\n\r\n\r\n/**\r\n * Sends an event when the directive's element is scrolled. Registers itself with the\r\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\r\n * can be listened to through the service.\r\n */\r\n@Directive({\r\n  selector: '[cdk-scrollable]'\r\n})\r\nexport class Scrollable implements OnInit, OnDestroy {\r\n  private _elementScrolled: Subject<Event> = new Subject();\r\n  private _scrollListener: Function;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _scroll: ScrollDispatcher,\r\n              private _ngZone: NgZone,\r\n              private _renderer: Renderer) {}\r\n\r\n  ngOnInit() {\r\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\r\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\r\n        this._elementScrolled.next(event);\r\n      });\r\n    });\r\n\r\n    this._scroll.register(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._scroll.deregister(this);\r\n\r\n    if (this._scrollListener) {\r\n      this._scrollListener();\r\n      this._scrollListener = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns observable that emits when a scroll event is fired on the host element.\r\n   */\r\n  elementScrolled(): Observable<any> {\r\n    return this._elementScrolled.asObservable();\r\n  }\r\n\r\n  getElementRef(): ElementRef {\r\n    return this._elementRef;\r\n  }\r\n}\r\n"]}