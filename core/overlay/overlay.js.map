{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../../../src/lib/core/overlay/overlay.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,wBAAwB,EACxB,UAAU,EACV,cAAc,EACd,QAAQ,EACR,MAAM,GAEP,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAC,aAAa,EAAC,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,sBAAsB,EAAC,MAAM,qCAAqC,CAAC;AAC3E,OAAO,EAAC,uBAAuB,EAAC,MAAM,2BAA2B,CAAC;AAClE,OAAO,EAAC,gBAAgB,EAAE,0BAA0B,EAAC,MAAM,qBAAqB,CAAC;AACjF,OAAO,EAAC,0BAA0B,EAAC,MAAM,4BAA4B,CAAC;AAGtE,8BAA8B;AAC9B,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,oDAAoD;AACpD,IAAI,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AAGtC;;;;;;;GAOG;AAEH,IAAa,OAAO;IAClB,iBAAoB,iBAAmC,EACnC,yBAAmD,EACnD,gBAAwC,EACxC,OAAuB,EACvB,SAAmB,EACnB,OAAe;QALf,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,8BAAyB,GAAzB,yBAAyB,CAA0B;QACnD,qBAAgB,GAAhB,gBAAgB,CAAwB;QACxC,YAAO,GAAP,OAAO,CAAgB;QACvB,cAAS,GAAT,SAAS,CAAU;QACnB,YAAO,GAAP,OAAO,CAAQ;IAAG,CAAC;IAEvC;;;;OAIG;IACH,wBAAM,GAAN,UAAO,KAAkC;QAAlC,sBAAA,EAAA,oBAAkC;QACvC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,KAAK,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,0BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACK,oCAAkB,GAA1B;QACE,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE,GAAG,iBAAe,YAAY,EAAI,CAAC;QAC1C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEvC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAE/D,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/F,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB,EAAE,KAAmB;QAC9D,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACjF,CAAC;IACH,cAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,OAAO;IADlB,UAAU,EAAE;qCAE2B,gBAAgB;QACR,wBAAwB;QACjC,sBAAsB;QAC/B,cAAc;QACZ,QAAQ;QACV,MAAM;GANxB,OAAO,CAwDnB;SAxDY,OAAO;AA0DpB,yDAAyD;AACzD,MAAM,CAAC,IAAM,iBAAiB,GAAe;IAC3C,OAAO;IACP,sBAAsB;IACtB,uBAAuB;IACvB,0BAA0B;IAC1B,0BAA0B;CAC3B,CAAC","sourcesContent":["import {\r\n  ComponentFactoryResolver,\r\n  Injectable,\r\n  ApplicationRef,\r\n  Injector,\r\n  NgZone,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {OverlayState} from './overlay-state';\r\nimport {DomPortalHost} from '../portal/dom-portal-host';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\r\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\r\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll/scroll-dispatcher';\r\n\r\n\r\n/** Next overlay unique ID. */\r\nlet nextUniqueId = 0;\r\n\r\n/** The default state for newly created overlays. */\r\nlet defaultState = new OverlayState();\r\n\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\r\n */\r\n @Injectable()\r\nexport class Overlay {\r\n  constructor(private _overlayContainer: OverlayContainer,\r\n              private _componentFactoryResolver: ComponentFactoryResolver,\r\n              private _positionBuilder: OverlayPositionBuilder,\r\n              private _appRef: ApplicationRef,\r\n              private _injector: Injector,\r\n              private _ngZone: NgZone) {}\r\n\r\n  /**\r\n   * Creates an overlay.\r\n   * @param state State to apply to the overlay.\r\n   * @returns Reference to the created overlay.\r\n   */\r\n  create(state: OverlayState = defaultState): OverlayRef {\r\n    return this._createOverlayRef(this._createPaneElement(), state);\r\n  }\r\n\r\n  /**\r\n   * Returns a position builder that can be used, via fluent API,\r\n   * to construct and configure a position strategy.\r\n   */\r\n  position(): OverlayPositionBuilder {\r\n    return this._positionBuilder;\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(): HTMLElement {\r\n    let pane = document.createElement('div');\r\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\r\n    pane.classList.add('cdk-overlay-pane');\r\n\r\n    this._overlayContainer.getContainerElement().appendChild(pane);\r\n\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalHost into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal host.\r\n   * @returns A portal host for the given DOM element.\r\n   */\r\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\r\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\r\n  }\r\n\r\n  /**\r\n   * Creates an OverlayRef for an overlay in the given DOM element.\r\n   * @param pane DOM element for the overlay\r\n   * @param state\r\n   */\r\n  private _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\r\n    return new OverlayRef(this._createPortalHost(pane), pane, state, this._ngZone);\r\n  }\r\n}\r\n\r\n/** Providers for Overlay and its related injectables. */\r\nexport const OVERLAY_PROVIDERS: Provider[] = [\r\n  Overlay,\r\n  OverlayPositionBuilder,\r\n  VIEWPORT_RULER_PROVIDER,\r\n  SCROLL_DISPATCHER_PROVIDER,\r\n  OVERLAY_CONTAINER_PROVIDER,\r\n];\r\n"]}