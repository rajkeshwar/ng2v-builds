{"version":3,"file":"activedescendant-key-manager.js","sourceRoot":"","sources":["../../../../src/lib/core/a11y/activedescendant-key-manager.ts"],"names":[],"mappings":";;;;;AACA,OAAO,EAAC,cAAc,EAAa,MAAM,oBAAoB,CAAC;AAY9D;IAAgD,8CAA6B;IAE3E,oCAAY,KAA+B;eACzC,kBAAM,KAAK,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,kDAAa,GAAb,UAAc,KAAa;QAA3B,iBAUC;QATC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YACrB,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;YACtC,CAAC;YACD,iBAAM,aAAa,aAAC,KAAK,CAAC,CAAC;YAC3B,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;YACpC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEH,iCAAC;AAAD,CAAC,AAvBD,CAAgD,cAAc,GAuB7D","sourcesContent":["import {QueryList} from '@angular/core';\r\nimport {ListKeyManager, CanDisable} from './list-key-manager';\r\n\r\n/**\r\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\r\n * Each item must know how to style itself as active or inactive and whether or not it is\r\n * currently disabled.\r\n */\r\nexport interface Highlightable extends CanDisable {\r\n  setActiveStyles(): void;\r\n  setInactiveStyles(): void;\r\n}\r\n\r\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\r\n\r\n  constructor(items: QueryList<Highlightable>) {\r\n    super(items);\r\n  }\r\n\r\n  /**\r\n   * This method sets the active item to the item at the specified index.\r\n   * It also adds active styles to the newly active item and removes active\r\n   * styles from the previously active item.\r\n   */\r\n  setActiveItem(index: number): void {\r\n    Promise.resolve().then(() => {\r\n      if (this.activeItem) {\r\n        this.activeItem.setInactiveStyles();\r\n      }\r\n      super.setActiveItem(index);\r\n      if (this.activeItem) {\r\n        this.activeItem.setActiveStyles();\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"]}