{"version":3,"file":"dir.js","sourceRoot":"","sources":["../../../../src/lib/core/rtl/dir.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,QAAQ,EAER,SAAS,EACT,WAAW,EACX,MAAM,EACN,KAAK,EACL,YAAY,EACb,MAAM,eAAe,CAAC;AAIvB;;;;;GAKG;AAMH,IAAa,GAAG;IALhB;QAME,uCAAuC;QACzB,SAAI,GAAoB,KAAK,CAAC;QAE5C,gDAAgD;QACtC,cAAS,GAAG,IAAI,YAAY,EAAQ,CAAC;IAkBjD,CAAC;IAdC,sBAAI,oBAAG;QAFP,oBAAoB;aAEpB;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aACD,UAAQ,CAAkB;YACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACxB,CAAC;QACH,CAAC;;;OAPA;IAUD,sBAAI,sBAAK;QADT,+CAA+C;aAC/C,cAA+B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACjD,UAAU,CAAkB,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;;OADE;IAEnD,UAAC;AAAD,CAAC,AAvBD,IAuBC;AArBe;IAAb,KAAK,CAAC,KAAK,CAAC;;iCAA+B;AAGlC;IAAT,MAAM,EAAE;;sCAAsC;AAI/C;IADC,WAAW,CAAC,UAAU,CAAC;;;8BAGvB;AAXU,GAAG;IALf,SAAS,CAAC;QACT,QAAQ,EAAE,OAAO;QACjB,iGAAiG;QACjG,QAAQ,EAAE,WAAW;KACtB,CAAC;GACW,GAAG,CAuBf;SAvBY,GAAG;AA8BhB,IAAa,SAAS;IAAtB;IAQA,CAAC;IAPC,kBAAkB;IACX,iBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,WAAS;YACnB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CAAC,AARD,IAQC;AARY,SAAS;IAJrB,QAAQ,CAAC;QACR,OAAO,EAAE,CAAC,GAAG,CAAC;QACd,YAAY,EAAE,CAAC,GAAG,CAAC;KACpB,CAAC;GACW,SAAS,CAQrB;SARY,SAAS","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Directive,\r\n  HostBinding,\r\n  Output,\r\n  Input,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nexport type LayoutDirection = 'ltr' | 'rtl';\r\n\r\n/**\r\n * Directive to listen for changes of direction of part of the DOM.\r\n *\r\n * Applications should use this directive instead of the native attribute so that Material\r\n * components can listen on changes of direction.\r\n */\r\n@Directive({\r\n  selector: '[dir]',\r\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\r\n  exportAs: '$implicit'\r\n})\r\nexport class Dir {\r\n  /** Layout direction of the element. */\r\n  @Input('dir') _dir: LayoutDirection = 'ltr';\r\n\r\n  /** Event emitted when the direction changes. */\r\n  @Output() dirChange = new EventEmitter<void>();\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.dir')\r\n  get dir(): LayoutDirection {\r\n    return this._dir;\r\n  }\r\n  set dir(v: LayoutDirection) {\r\n    let old = this._dir;\r\n    this._dir = v;\r\n    if (old != this._dir) {\r\n      this.dirChange.emit();\r\n    }\r\n  }\r\n\r\n  /** Current layout direction of the element. */\r\n  get value(): LayoutDirection { return this.dir; }\r\n  set value(v: LayoutDirection) { this.dir = v; }\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [Dir],\r\n  declarations: [Dir]\r\n})\r\nexport class RtlModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: RtlModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}