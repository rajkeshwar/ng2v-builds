{"version":3,"file":"option.js","sourceRoot":"","sources":["../../../../src/lib/core/option/option.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Renderer,\r\n  ViewEncapsulation,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ENTER, SPACE} from '../keyboard/keycodes';\r\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\r\nimport {MdRippleModule} from '../ripple/index';\r\nimport {MdSelectionModule} from '../selection/index';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\r\n\r\n/**\r\n * Option IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Event object emitted by MdOption when selected or deselected. */\r\nexport class MdOptionSelectionChange {\r\n  constructor(public source: MdOption, public isUserInput = false) { }\r\n}\r\n\r\n\r\n/**\r\n * Single option inside of a `<md-select>` element.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-option, mat-option',\r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.mat-selected]': 'selected',\r\n    '[class.mat-option-multiple]': 'multiple',\r\n    '[class.mat-active]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.mat-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '[class.mat-option]': 'true',\r\n  },\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MdOption {\r\n  private _selected: boolean = false;\r\n  private _active: boolean = false;\r\n\r\n  /** Whether the option is disabled.  */\r\n  private _disabled: boolean = false;\r\n\r\n  private _id: string = `md-option-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the wrapping component is in multiple selection mode. */\r\n  multiple: boolean = false;\r\n\r\n  /** The unique ID of the option. */\r\n  get id() { return this._id; }\r\n\r\n  /** Whether or not the option is currently selected. */\r\n  get selected(): boolean { return this._selected; }\r\n\r\n  /** The form value of the option. */\r\n  @Input() value: any;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n  /** Event emitted when the option is selected or deselected. */\r\n  @Output() onSelectionChange = new EventEmitter<MdOptionSelectionChange>();\r\n\r\n  constructor(\r\n    private _element: ElementRef,\r\n    private _renderer: Renderer,\r\n    @Optional() @Inject(MATERIAL_COMPATIBILITY_MODE) public _isCompatibilityMode: boolean) {}\r\n\r\n  /**\r\n   * Whether or not the option is currently active and ready to be selected.\r\n   * An active option displays styles as if it is focused, but the\r\n   * focus is actually retained somewhere else. This comes in handy\r\n   * for components like autocomplete where focus must remain on the input.\r\n   */\r\n  get active(): boolean {\r\n    return this._active;\r\n  }\r\n\r\n  /**\r\n   * The displayed value of the option. It is necessary to show the selected option in the\r\n   * select's trigger.\r\n   */\r\n  get viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return this._getHostElement().textContent.trim();\r\n  }\r\n\r\n  /** Selects the option. */\r\n  select(): void {\r\n    this._selected = true;\r\n    this._emitSelectionChangeEvent();\r\n  }\r\n\r\n  /** Deselects the option. */\r\n  deselect(): void {\r\n    this._selected = false;\r\n    this._emitSelectionChangeEvent();\r\n  }\r\n\r\n  /** Sets focus onto this option. */\r\n  focus(): void {\r\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\r\n  }\r\n\r\n  /**\r\n   * This method sets display styles on the option to make it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setActiveStyles(): void {\r\n    this._active = true;\r\n  }\r\n\r\n  /**\r\n   * This method removes display styles on the option that made it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setInactiveStyles(): void {\r\n    this._active = false;\r\n  }\r\n\r\n  /** Ensures the option is selected when activated from the keyboard. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n      this._selectViaInteraction();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the option while indicating the selection came from the user. Used to\r\n   * determine if the select's view -> model callback should be invoked.\r\n   */\r\n  _selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\r\n\r\n  /** Returns the correct tabindex for the option depending on disabled state. */\r\n  _getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\r\n\r\n  /** Fetches the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  /** Emits the selection change event. */\r\n  private _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\r\n  };\r\n\r\n}\r\n\r\n@NgModule({\r\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\r\n  exports: [MdOption],\r\n  declarations: [MdOption]\r\n})\r\nexport class MdOptionModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdOptionModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}