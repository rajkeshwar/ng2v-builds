{"version":3,"file":"clock.js","sourceRoot":"","sources":["../../../src/lib/datepicker/clock.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { DateUtil } from './date-util';\r\nimport { DateLocale } from './date-locale';\r\nimport {\r\n  DOWN_ARROW,\r\n  END, ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW\r\n} from '../core/keyboard/keycodes';\r\n\r\n/**\r\n * A clock that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md2-clock',\r\n  templateUrl: 'clock.html',\r\n  styleUrls: ['clock.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Md2Clock implements AfterContentInit {\r\n  /** A date representing the period (hour or minute) to start the clock in. */\r\n  @Input()\r\n  get startAt() { return this._startAt; }\r\n  set startAt(value: any) { this._startAt = this._locale.parseDate(value); }\r\n  private _startAt: Date;\r\n\r\n  /** Whether the clock should be started in hour or minute view. */\r\n  @Input() startView: 'hour' | 'minute' = 'hour';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected() { return this._selected; }\r\n  set selected(value: any) {\r\n    this._selected = this._locale.parseDate(value);\r\n    this._getTimeInCurrentDate(this._selected);\r\n  }\r\n  private _selected: Date;\r\n  private _hour: number;\r\n  private _minute: number;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): Date { return this._minDate; };\r\n  set minDate(date: Date) { this._minDate = this._locale.parseDate(date); }\r\n  private _minDate: Date;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): Date { return this._maxDate; };\r\n  set maxDate(date: Date) { this._maxDate = this._locale.parseDate(date); }\r\n  private _maxDate: Date;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: Date) => boolean;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() selectedChange = new EventEmitter<Date>();\r\n\r\n  /** Date filter for the hour and minute views. */\r\n  _dateFilterForViews = (date: Date) => {\r\n    return !!date &&\r\n      (!this.dateFilter || this.dateFilter(date)) &&\r\n      (!this.minDate || this._util.isSameDay(date, this.minDate)) &&\r\n      (!this.maxDate || this._util.isSameDay(date, this.maxDate));\r\n  }\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get _activeDate() { return this._clampedActiveDate; }\r\n  set _activeDate(value: Date) {\r\n    this._clampedActiveDate = this._util.clampDate(value, this.minDate, this.maxDate);\r\n    this._init();\r\n  }\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _hours: Array<Object> = [];\r\n  _minutes: Array<Object> = [];\r\n\r\n  private _clampedActiveDate: Date;\r\n\r\n  /** Whether the clock is in hour view. */\r\n  _hourView: boolean;\r\n\r\n  /** The label for the current clock view. */\r\n  get _label(): string {\r\n    return this._hourView ?\r\n      this._locale.getCalendarMonthHeaderLabel(this._activeDate) :\r\n      this._locale.getCalendarYearHeaderLabel(this._activeDate);\r\n  }\r\n\r\n  get _hand(): any {\r\n    let CLOCK_INNER_RADIUS = 27.5;\r\n    let CLOCK_OUTER_RADIUS = 41.25;\r\n\r\n    let deg = 0;\r\n    let radius = CLOCK_OUTER_RADIUS;\r\n    //if (this._view) {\r\n    let inner = this._hour > 0 && this._hour < 13;\r\n    radius = inner ? CLOCK_INNER_RADIUS : CLOCK_OUTER_RADIUS;\r\n    deg = Math.round(this._hour * (360 / (24 / 2)));\r\n    //} else {\r\n    //  deg = Math.round(this._minute * (360 / 60));\r\n    //}\r\n\r\n    return {\r\n      'transform': `rotate(${deg}deg)`,\r\n      'height': `${radius}%`,\r\n      'margin-top': `${50 - radius}%`\r\n    };\r\n  }\r\n\r\n  constructor(private _locale: DateLocale, private _util: DateUtil) { }\r\n\r\n  ngAfterContentInit() {\r\n    this._activeDate = this.startAt || this._util.today();\r\n    this._hourView = this.startView != 'minute';\r\n    this._init();\r\n  }\r\n\r\n  /** Handles date selection in the hour view. */\r\n  _dateSelected(date: Date): void {\r\n    if ((!date || !this.selected) && date != this.selected || this._util.isSameDay(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  private _init() {\r\n    //this._selected = this._getMonthInCurrentYear(this.selected);\r\n    //this._todayMonth = this._getMonthInCurrentYear(SimpleDate.today());\r\n    //this._yearLabel = this._locale.getCalendarYearHeaderLabel(this.activeDate);\r\n\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    //this._hours = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\r\n    //  month => this._createCellForMonth(month)));\r\n    let CLOCK_RADIUS = 50;\r\n    let CLOCK_INNER_RADIUS = 27.5;\r\n    let CLOCK_OUTER_RADIUS = 41.25;\r\n    let CLOCK_TICK_RADIUS = 7.0833;\r\n\r\n    this._hours.length = 0;\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n      //let x = -(50 * (Math.sin(-Math.PI * (i / 6))));\r\n      //let y = -(50 * (Math.cos(-Math.PI * (i / 6))));\r\n      //this._hours.push({\r\n      //  hour: i === 0 ? '00' : i,\r\n      //  top: y,\r\n      //  left: x\r\n      //});\r\n\r\n      let radian = i / 6 * Math.PI;\r\n      let inner = i > 0 && i < 13,\r\n        radius = inner ? CLOCK_INNER_RADIUS : CLOCK_OUTER_RADIUS;\r\n      this._hours.push({\r\n        hour: i === 0 ? '00' : i,\r\n        top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\r\n        left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS\r\n      });\r\n    }\r\n\r\n    for (let i = 0; i < 60; i += 5) {\r\n      let radian = i / 30 * Math.PI;\r\n      this._minutes.push({\r\n        minute: i === 0 ? '00' : i,\r\n        top: CLOCK_RADIUS - Math.cos(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS,\r\n        left: CLOCK_RADIUS + Math.sin(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handles hour selection in the minute view. */\r\n  _hourSelected(hour: Date): void {\r\n    this._activeDate = hour;\r\n    this._hourView = true;\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  _currentPeriodClicked(): void {\r\n    this._hourView = !this._hourView;\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  _previousClicked(): void {\r\n    this._activeDate = this._hourView ?\r\n      this._util.incrementHours(this._activeDate, -1) :\r\n      this._util.incrementYears(this._activeDate, -1);\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  _nextClicked(): void {\r\n    this._activeDate = this._hourView ?\r\n      this._util.incrementHours(this._activeDate, 1) : this._util.incrementMinutes(this._activeDate, 1);\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  _previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  _nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (hour or minute). */\r\n  private _isSameView(date1: Date, date2: Date): boolean {\r\n    return this._hourView ?\r\n      date1.getFullYear() == date2.getFullYear() && date1.getHours() == date2.getHours() :\r\n      date1.getFullYear() == date2.getFullYear();\r\n  }\r\n\r\n  /** Handles keydown events on the clock body. */\r\n  _handleClockBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n    if (this._hourView) {\r\n      this._handleCalendarBodyKeydownInMonthView(event);\r\n    } else {\r\n      this._handleCalendarBodyKeydownInYearView(event);\r\n    }\r\n  }\r\n\r\n  /** Handles keydown events on the clock body when clock is in hour view. */\r\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._util.incrementDays(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._util.incrementDays(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._util.incrementDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._util.incrementDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._util.getFirstDateOfMonth(this._activeDate);\r\n        break;\r\n      case END:\r\n        this._activeDate = this._util.getLastDateOfMonth(this._activeDate);\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = event.altKey ?\r\n          this._util.incrementYears(this._activeDate, -1) :\r\n          this._util.incrementHours(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = event.altKey ?\r\n          this._util.incrementYears(this._activeDate, 1) :\r\n          this._util.incrementHours(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (this._dateFilterForViews(this._activeDate)) {\r\n          this._dateSelected(this._activeDate);\r\n          break;\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keydown events on the clock body when clock is in minute view. */\r\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._util.incrementHours(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._util.incrementHours(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._util.incrementHours(this._activeDate, -this._activeDate.getHours());\r\n        break;\r\n      case END:\r\n        this._activeDate = this._util.incrementHours(this._activeDate, 11 - this._activeDate.getHours());\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = this._util.incrementYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = this._util.incrementYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._hourSelected(this._activeDate);\r\n        break;\r\n      default:\r\n        // Don't prevent default on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Determine the date for the hour that comes before the given hour in the same column in the\r\n   * clock table.\r\n   */\r\n  private _prevMonthInSameCol(date: Date) {\r\n    // Determine how many hours to jump forward given that there are 2 empty slots at the beginning\r\n    // of each minute.\r\n    let increment = date.getHours() <= 4 ? -5 : (date.getHours() >= 7 ? -7 : -12);\r\n    return this._util.incrementHours(date, increment);\r\n  }\r\n\r\n  /**\r\n   * Determine the date for the hour that comes after the given hour in the same column in the\r\n   * clock table.\r\n   */\r\n  private _nextMonthInSameCol(date: Date): Date {\r\n    // Determine how many hours to jump forward given that there are 2 empty slots at the beginning\r\n    // of each minute.\r\n    let increment = date.getHours() <= 4 ? 7 : (date.getHours() >= 7 ? 5 : 12);\r\n    return this._util.incrementHours(date, increment);\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getTimeInCurrentDate(date: Date) {\r\n    this._hour = date ? date.getHours() : null;\r\n    this._minute = date ? date.getMinutes() : null;\r\n  }\r\n}"]}