{"version":3,"file":"date-util.js","sourceRoot":"","sources":["../../../src/lib/datepicker/date-util.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateLocale } from './date-locale';\r\n\r\nexport class DateUtil {\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  _locale: DateLocale = new DateLocale();\r\n\r\n  parseDateMap: any = {\r\n    'y': 0,      // placeholder -> ctorIndex\r\n    'Y': [0, -2000],\r\n    'M': [1, 1], // placeholder -> [ctorIndex, offset|value array]\r\n    'n': [1, this._locale.shortMonths],\r\n    'N': [1, this._locale.fullMonths],\r\n    'd': 2,\r\n    'm': 4,\r\n    'H': 3,\r\n    'h': 3,\r\n    'K': [3, 1],\r\n    'k': [3, 1],\r\n    's': 5,\r\n    'S': 6,\r\n    'a': [3, ['am', 'pm']]\r\n  };\r\n\r\n  replace(s: string, regexp: any, sub?: string) {\r\n    return (s != null ? '' + s : '').replace(regexp, sub != null ? sub : '');\r\n  }\r\n\r\n  startsWith(base: any, start: any) {\r\n    return start != null && base.substr(0, start.length) == start;\r\n  }\r\n\r\n  isType(s: any, o: any) {\r\n    return typeof s == o;\r\n  }\r\n\r\n  isFunction(f: any) {\r\n    return this.isType(f, 'function');\r\n  }\r\n\r\n  isList(v: any) {\r\n    return !!v && v.length != null && !this.isString(v) && !this.isNode(v) && !this.isFunction(v);\r\n  }\r\n\r\n  isString(s: any) {\r\n    return this.isType(s, 'string');\r\n  }\r\n\r\n  isObject(f: any) {\r\n    return !!f && this.isType(f, 'object');\r\n  }\r\n\r\n  isNode(n: any) {\r\n    return n && n['nodeType'];\r\n  }\r\n\r\n  isNumber(n: any) {\r\n    return this.isType(n, 'number');\r\n  }\r\n\r\n  getFindFunc(findFunc: any) {\r\n    return this.isFunction(findFunc) ? findFunc : (obj: any, index: any) => {\r\n      if (findFunc === obj) {\r\n        return index;\r\n      }\r\n    };\r\n  }\r\n\r\n  getFindIndex(list: any, index: any, defaultIndex: any) {\r\n    return index == null ? defaultIndex :\r\n      index < 0 ? Math.max(list.length + index, 0) : Math.min(list.length, index);\r\n  }\r\n\r\n  find(list: any, findFunc: any, startIndex?: any, endIndex?: any) {\r\n    let f = this.getFindFunc(findFunc);\r\n    let e = this.getFindIndex(list, endIndex, list.length);\r\n    let r: any;\r\n    for (let i = this.getFindIndex(list, startIndex, 0); i < e; i++) {\r\n      if ((r = f.call(list, list[i], i)) != null) {\r\n        return r;\r\n      }\r\n    }\r\n  }\r\n\r\n  parseDate(date: string, fmt: string) {\r\n    let indexMap: any = {}; // contains reGroupPosition -> typeLetter or [typeLetter, value array]\r\n    let reIndex = 1;\r\n    let timezoneOffsetMatch: any;\r\n    let timezoneIndex: any;\r\n    let match: any;\r\n\r\n    let format = this.replace(fmt, /^\\?/);\r\n    if (format != fmt && !this.replace(date, /^\\s+|\\s+$/g)) {\r\n      return null;\r\n    }\r\n\r\n    if (match = /^\\[([+-])(\\d\\d)(\\d\\d)\\]\\s*(.*)/.exec(format)) {\r\n      timezoneOffsetMatch = match;\r\n      format = match[4];\r\n    }\r\n\r\n    let parser = new RegExp(format.replace(/(.)(\\1*)(?:\\[([^\\]]*)\\])?/g,\r\n      (wholeMatch, placeholderChar, placeholderDigits, param) => {\r\n        if (/[dmhkyhs]/i.test(placeholderChar)) {\r\n          indexMap[reIndex++] = placeholderChar;\r\n          let plen = placeholderDigits.length + 1;\r\n          return '(\\\\d' + (plen < 2 ? '+' : ('{1,' + plen + '}')) + ')';\r\n        } else if (placeholderChar == 'z') {\r\n          timezoneIndex = reIndex;\r\n          reIndex += 3;\r\n          return '([+-])(\\\\d\\\\d)(\\\\d\\\\d)';\r\n        } else if (/[Nna]/.test(placeholderChar)) {\r\n          indexMap[reIndex++] = [placeholderChar, param && param.split(',')];\r\n          return '([a-zA-Z\\\\u0080-\\\\u1fff]+)';\r\n        } else if (/w/i.test(placeholderChar)) {\r\n          return '[a-zA-Z\\\\u0080-\\\\u1fff]+';\r\n        } else if (/\\s/.test(placeholderChar)) {\r\n          return '\\\\s+';\r\n        } else {\r\n          return this.replace(wholeMatch, /[\\\\\\[\\]\\/{}()*+?.$|^-]/g, '\\\\$&');\r\n        }\r\n      }));\r\n\r\n    if (!(match = parser.exec(date))) {\r\n      return undefined;\r\n    }\r\n\r\n    let ctorArgs = [0, 0, 0, 0, 0, 0, 0];\r\n    for (let i = 1; i < reIndex; i++) {\r\n      let matchVal = match[i];\r\n      let indexEntry: any = indexMap[i];\r\n      if (this.isList(indexEntry)) { // for a, n or N\r\n        let placeholderChar = indexEntry[0];\r\n        let mapEntry = this.parseDateMap[placeholderChar];\r\n        let ctorIndex = mapEntry[0];\r\n        let valList = indexEntry[1] || mapEntry[1];\r\n        let listValue = this.find(valList,\r\n          (v: any, index: any) => {\r\n            if (this.startsWith(matchVal.toLowerCase(), v.toLowerCase())) {\r\n              return index;\r\n            }\r\n          });\r\n        if (listValue == null) {\r\n          return undefined;\r\n        }\r\n        if (placeholderChar == 'a') {\r\n          ctorArgs[ctorIndex] += listValue * 12;\r\n        } else {\r\n          ctorArgs[ctorIndex] = listValue;\r\n        }\r\n      } else if (indexEntry) { // for numeric values (yHmMs)\r\n        let value = parseFloat(matchVal);\r\n        let mapEntry = this.parseDateMap[indexEntry];\r\n        if (this.isList(mapEntry)) {\r\n          ctorArgs[mapEntry[0]] += value - mapEntry[1];\r\n        } else {\r\n          ctorArgs[mapEntry] += value;\r\n        }\r\n      }\r\n    }\r\n    let d = new Date(ctorArgs[0], ctorArgs[1], ctorArgs[2], ctorArgs[3], ctorArgs[4],\r\n      ctorArgs[5], ctorArgs[6]);\r\n    return d;\r\n  }\r\n\r\n  /**\r\n   * Gets the first day of the month for the given date's month.\r\n   * @param {Date} date\r\n   * @returns {Date}\r\n   */\r\n  getFirstDateOfWeek(date: Date, firstDayOfWeek: number) {\r\n    let day: number = date.getDate() - ((7 + date.getDay() - firstDayOfWeek) % 7);\r\n    return new Date(date.getFullYear(), date.getMonth(), day, date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets the first day of the month for the given date's month.\r\n   * @param {Date} date\r\n   * @returns {Date}\r\n   */\r\n  getFirstDateOfMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets the number of days in the month for the given date's month.\r\n   * @param date\r\n   * @returns {number}\r\n   */\r\n  getNumberOfDaysInMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\r\n  }\r\n\r\n  /**\r\n   * Get an arbitrary date in the month after the given date's month.\r\n   * @param date\r\n   * @returns {Date}\r\n   */\r\n  getDateInNextMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 1,\r\n      date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Get an arbitrary date in the month before the given date's month.\r\n   * @param date\r\n   * @returns {Date}\r\n   */\r\n  getDateInPreviousMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth() - 1, 1,\r\n      date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets whether two dates have the same month and year.\r\n   * @param {Date} d1\r\n   * @param {Date} d2\r\n   * @returns {boolean}\r\n   */\r\n  isSameMonthAndYear(d1: Date, d2: Date) {\r\n    return d1 && d2 && d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();\r\n  }\r\n\r\n  /**\r\n   * Gets whether two dates are the same day (not not necesarily the same time).\r\n   * @param {Date} d1\r\n   * @param {Date} d2\r\n   * @returns {boolean}\r\n   */\r\n  isSameDay(d1: Date, d2: Date) {\r\n    return d1 && d2 && d1.getDate() == d2.getDate() && this.isSameMonthAndYear(d1, d2);\r\n  }\r\n\r\n  /**\r\n   * Gets whether a date is in the month immediately after some date.\r\n   * @param {Date} startDate The date from which to compare.\r\n   * @param {Date} endDate The date to check.\r\n   * @returns {boolean}\r\n   */\r\n  isInNextMonth(startDate: Date, endDate: Date) {\r\n    let nextMonth = this.getDateInNextMonth(startDate);\r\n    return this.isSameMonthAndYear(nextMonth, endDate);\r\n  }\r\n\r\n  /**\r\n   * Gets whether a date is in the month immediately before some date.\r\n   * @param {Date} startDate The date from which to compare.\r\n   * @param {Date} endDate The date to check.\r\n   * @returns {boolean}\r\n   */\r\n  isInPreviousMonth(startDate: Date, endDate: Date) {\r\n    let previousMonth = this.getDateInPreviousMonth(startDate);\r\n    return this.isSameMonthAndYear(endDate, previousMonth);\r\n  }\r\n\r\n  /**\r\n   * Gets the midpoint between two dates.\r\n   * @param {Date} d1\r\n   * @param {Date} d2\r\n   * @returns {Date}\r\n   */\r\n  getDateMidpoint(d1: Date, d2: Date) {\r\n    return this.createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);\r\n  }\r\n\r\n  /**\r\n   * Gets the week of the month that a given date occurs in.\r\n   * @param {Date} date\r\n   * @returns {number} Index of the week of the month (zero-based).\r\n   */\r\n  getWeekOfMonth(date: Date) {\r\n    let firstDayOfMonth = this.getFirstDateOfMonth(date);\r\n    return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of minutes. Number of minutes can be negative.\r\n   * @param {Date} date\r\n   * @param {number} numberOfMinutes\r\n   * @returns {Date}\r\n   */\r\n  incrementMinutes(date: Date, numberOfMinutes: number) {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(),\r\n      date.getHours(), date.getMinutes() + numberOfMinutes);\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of hours. Number of hours can be negative.\r\n   * @param {Date} date\r\n   * @param {number} numberOfHours\r\n   * @returns {Date}\r\n   */\r\n  incrementHours(date: Date, numberOfHours: number) {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(),\r\n      date.getHours() + numberOfHours, date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of days. Number of days can be negative.\r\n   * @param {Date} date\r\n   * @param {number} numberOfDays\r\n   * @returns {Date}\r\n   */\r\n  incrementDays(date: Date, numberOfDays: number) {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays,\r\n      date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of months. Number of months can be negative.\r\n   * If the date of the given month does not match the target month, the date will be set to the\r\n   * last day of the month.\r\n   * @param {Date} date\r\n   * @param {number} numberOfMonths\r\n   * @returns {Date}\r\n   */\r\n  incrementMonths(date: Date, numberOfMonths: number) {\r\n    // If the same date in the target month does not actually exist, the Date object will\r\n    // automatically advance *another* month by the number of missing days.\r\n    // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.\r\n    // So, we check if the month overflowed and go to the last day of the target month instead.\r\n    let dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1,\r\n      date.getHours(), date.getMinutes());\r\n    let numberOfDaysInMonth = this.getNumberOfDaysInMonth(dateInTargetMonth);\r\n    if (numberOfDaysInMonth < date.getDate()) {\r\n      dateInTargetMonth.setDate(numberOfDaysInMonth);\r\n    } else {\r\n      dateInTargetMonth.setDate(date.getDate());\r\n    }\r\n\r\n    return dateInTargetMonth;\r\n  }\r\n\r\n  /**\r\n   * Get the integer distance between two months. This *only* considers the month and year\r\n   * portion of the Date instances.\r\n   *\r\n   * @param {Date} start\r\n   * @param {Date} end\r\n   * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\r\n   *     chronologically, this number will be negative.\r\n   */\r\n  getMonthDistance(start: Date, end: Date) {\r\n    return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());\r\n  }\r\n\r\n  /**\r\n   * Gets the last day of the month for the given date.\r\n   * @param {Date} date\r\n   * @returns {Date}\r\n   */\r\n  getLastDateOfMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth(), this.getNumberOfDaysInMonth(date),\r\n      date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  /**\r\n   * Checks whether a date is valid.\r\n   * @param {Date} date\r\n   * @return {boolean} Whether the date is a valid Date.\r\n   */\r\n  isValidDate(date: Date) {\r\n    return date != null && date.getTime && !isNaN(date.getTime());\r\n  }\r\n\r\n  /**\r\n   * Sets a date's time to midnight.\r\n   * @param {Date} date\r\n   */\r\n  setDateTimeToMidnight(date: Date) {\r\n    if (this.isValidDate(date)) {\r\n      date.setHours(0, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a date with the time set to midnight.\r\n   * Drop-in replacement for two forms of the Date constructor:\r\n   * 1. No argument for Date representing now.\r\n   * 2. Single-argument value representing number of seconds since Unix Epoch\r\n   * or a Date object.\r\n   * @param {number|Date=} value\r\n   * @return {Date} New date with time set to midnight.\r\n   */\r\n  createDateAtMidnight(value: any) {\r\n    let date: Date;\r\n    if (!value) {\r\n      date = new Date();\r\n    } else {\r\n      date = new Date(value);\r\n    }\r\n    this.setDateTimeToMidnight(date);\r\n    return date;\r\n  }\r\n\r\n  /**\r\n   * Checks if a date is within a min and max range, ignoring the time component.\r\n   * If minDate or maxDate are not dates, they are ignored.\r\n   * @param {Date} date\r\n   * @param {Date} minDate\r\n   * @param {Date} maxDate\r\n   */\r\n  isDateWithinRange(date: Date, minDate: Date, maxDate: Date) {\r\n    let dateAtMidnight = this.createDateAtMidnight(date);\r\n    let minDateAtMidnight = this.isValidDate(minDate) ? this.createDateAtMidnight(minDate) : null;\r\n    let maxDateAtMidnight = this.isValidDate(maxDate) ? this.createDateAtMidnight(maxDate) : null;\r\n    return (!minDateAtMidnight || minDateAtMidnight <= dateAtMidnight) &&\r\n      (!maxDateAtMidnight || maxDateAtMidnight >= dateAtMidnight);\r\n  }\r\n\r\n  /**\r\n   * Gets a new date incremented by the given number of years. Number of years can be negative.\r\n   * See `incrementMonths` for notes on overflow for specific dates.\r\n   * @param {Date} date\r\n   * @param {number} numberOfYears\r\n   * @returns {Date}\r\n   */\r\n  incrementYears(date: Date, numberOfYears: number) {\r\n    return this.incrementMonths(date, numberOfYears * 12);\r\n  }\r\n\r\n  /**\r\n   * Get the integer distance between two years. This *only* considers the year portion of the\r\n   * Date instances.\r\n   *\r\n   * @param {Date} start\r\n   * @param {Date} end\r\n   * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\r\n   *     chronologically, this number will be negative.\r\n   */\r\n  getYearDistance(start: Date, end: Date) {\r\n    return end.getFullYear() - start.getFullYear();\r\n  }\r\n\r\n  /**\r\n   * Clamps a date between a minimum and a maximum date.\r\n   * @param {Date} date Date to be clamped\r\n   * @param {Date=} minDate Minimum date\r\n   * @param {Date=} maxDate Maximum date\r\n   * @return {Date}\r\n   */\r\n  clampDate(date: Date, minDate: Date, maxDate: Date) {\r\n    let boundDate = date;\r\n    if (minDate && date < minDate) {\r\n      boundDate = new Date(minDate.getTime());\r\n    }\r\n    if (maxDate && date > maxDate) {\r\n      boundDate = new Date(maxDate.getTime());\r\n    }\r\n    return boundDate;\r\n  }\r\n\r\n  /**\r\n   * Extracts and parses the timestamp from a DOM node.\r\n   * @param  {HTMLElement} node Node from which the timestamp will be extracted.\r\n   * @return {number} Time since epoch.\r\n   */\r\n  getTimestampFromNode(node: any) {\r\n    if (node && node.hasAttribute('data-timestamp')) {\r\n      return Number(node.getAttribute('data-timestamp'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if a month is within a min and max range, ignoring the date and time components.\r\n   * If minDate or maxDate are not dates, they are ignored.\r\n   * @param {Date} date\r\n   * @param {Date} minDate\r\n   * @param {Date} maxDate\r\n   */\r\n  isMonthWithinRange(date: Date, minDate: Date, maxDate: Date) {\r\n    let month = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    return (!minDate || minDate.getFullYear() < year || minDate.getMonth() <= month) &&\r\n      (!maxDate || maxDate.getFullYear() > year || maxDate.getMonth() >= month);\r\n  }\r\n\r\n}\r\n"]}